<?xml version="1.0" encoding="UTF-8"?>

<!--
    Copyright (c) 2011-2015 Apple Inc. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  -->

<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<!-- Define the kinds of software and user behavior the load simulation
			will simulate. -->
		<key>clients</key>

		<!-- Have as many different kinds of software and user behavior configurations
			as you want. Each is a dict -->
		<array>

			<dict>

				<!-- Here is an El Captian iCal simulator. -->
				<key>software</key>
				<string>contrib.performance.loadtest.ical.OS_X_10_11</string>

				<!-- Arguments to use to initialize the client instance. -->
				<key>params</key>
				<dict>
					<!-- Name that appears in logs. -->
					<key>title</key>
					<string>10.11</string>

					<!-- Client can poll the calendar home at some interval. This is 
						in seconds. -->
					<key>calendarHomePollInterval</key>
					<integer>30</integer>

					<!-- If the server advertises xmpp push, OS X 10.11 can wait for notifications 
						about calendar home changes instead of polling for them periodically. If 
						this option is true, then look for the server advertisement for xmpp push 
						and use it if possible. Still fall back to polling if there is no xmpp push 
						advertised. -->
					<key>supportPush</key>
					<false />
					<key>supportAmpPush</key>
					<false />
				</dict>

				<!-- The profiles define certain types of user behavior on top of the 
					client software being simulated. -->
				<key>profiles</key>
				<array>

					<!-- First an event-creating profile, which will periodically create 
						new events at a random time on a random calendar. -->
					<dict>
						<key>class</key>
						<string>contrib.performance.loadtest.profiles.Eventer</string>

						<key>params</key>
						<dict>
							<key>enabled</key>
							<true/>

							<!-- Define the interval (in seconds) at which this profile will use 
								its client to create a new event. -->
							<key>interval</key>
							<integer>20</integer>

							<!-- Define how start times (DTSTART) for the randomly generated events 
								will be selected. This is an example of a "Distribution" parameter. The value 
								for most "Distribution" parameters are interchangeable and extensible. -->
							<key>eventStartDistribution</key>
							<dict>

								<!-- This distribution is pretty specialized. It produces timestamps 
									in the near future, limited to certain days of the week and certain hours 
									of the day. -->
								<key>type</key>
								<string>contrib.performance.loadtest.distributions.WorkDistribution</string>

								<key>params</key>
								<dict>
									<!-- These are the days of the week the distribution will use. -->
									<key>daysOfWeek</key>
									<array>
										<string>mon</string>
										<string>tue</string>
										<string>wed</string>
										<string>thu</string>
										<string>fri</string>
									</array>

									<!-- The earliest hour of a day at which an event might be scheduled. -->
									<key>beginHour</key>
									<integer>8</integer>

									<!-- And the latest hour of a day (at which an event will be scheduled 
										to begin!). -->
									<key>endHour</key>
									<integer>16</integer>

									<!-- The timezone in which the event is scheduled. (XXX Does this 
										really work right?) -->
									<key>tzname</key>
									<string>America/Los_Angeles</string>
								</dict>
							</dict>

							<!-- Define how recurrences are created. -->
							<key>recurrenceDistribution</key>
							<dict>

								<!-- This distribution is pretty specialized.  We have a fixed set of
								     RRULEs defined for this distribution and pick each based on a
								     weight. -->
								<key>type</key>
								<string>contrib.performance.loadtest.distributions.RecurrenceDistribution</string>

								<key>params</key>
								<dict>
									<!-- False to disable RRULEs -->
									<key>allowRecurrence</key>
									<false/>

									<!-- These are the weights for the specific set of RRULEs. -->
									<key>weights</key>
									<dict>
										<!-- Half of all events will be non-recurring -->
										<key>none</key>
										<integer>50</integer>
										
										<!-- Daily and weekly are pretty common -->
										<key>daily</key>
										<integer>10</integer>
										<key>weekly</key>
										<integer>20</integer>
										
										<!-- Monthly, yearly, daily & weekly limit not so common -->
										<key>monthly</key>
										<integer>2</integer>
										<key>yearly</key>
										<integer>1</integer>
										<key>dailylimit</key>
										<integer>2</integer>
										<key>weeklylimit</key>
										<integer>5</integer>
										
										<!-- Work days pretty common -->
										<key>workdays</key>
										<integer>10</integer>
									</dict>
								</dict>
							</dict>
						</dict>
					</dict>

					<!-- This profile will create a new event, and then periodically update the ACKNOWLEDGED property. -->
					<dict>
						<key>class</key>
						<string>contrib.performance.loadtest.profiles.EventUpdater</string>

						<key>params</key>
						<dict>
							<key>enabled</key>
							<false/>

							<!-- Define the interval (in seconds) at which this profile will use
								its client to create a new event. -->
							<key>interval</key>
							<integer>5</integer>

							<!-- Define how start times (DTSTART) for the randomly generated events
								will be selected. This is an example of a "Distribution" parameter. The value
								for most "Distribution" parameters are interchangeable and extensible. -->
							<key>eventStartDistribution</key>
							<dict>

								<!-- This distribution is pretty specialized. It produces timestamps
									in the near future, limited to certain days of the week and certain hours
									of the day. -->
								<key>type</key>
								<string>contrib.performance.loadtest.distributions.WorkDistribution</string>

								<key>params</key>
								<dict>
									<!-- These are the days of the week the distribution will use. -->
									<key>daysOfWeek</key>
									<array>
										<string>mon</string>
										<string>tue</string>
										<string>wed</string>
										<string>thu</string>
										<string>fri</string>
									</array>

									<!-- The earliest hour of a day at which an event might be scheduled. -->
									<key>beginHour</key>
									<integer>8</integer>

									<!-- And the latest hour of a day (at which an event will be scheduled
										to begin!). -->
									<key>endHour</key>
									<integer>16</integer>

									<!-- The timezone in which the event is scheduled. (XXX Does this
										really work right?) -->
									<key>tzname</key>
									<string>America/Los_Angeles</string>
								</dict>
							</dict>

							<!-- Define how recurrences are created. -->
							<key>recurrenceDistribution</key>
							<dict>

								<!-- This distribution is pretty specialized.  We have a fixed set of
								     RRULEs defined for this distribution and pick each based on a
								     weight. -->
								<key>type</key>
								<string>contrib.performance.loadtest.distributions.RecurrenceDistribution</string>

								<key>params</key>
								<dict>
									<!-- False to disable RRULEs -->
									<key>allowRecurrence</key>
									<true/>

									<!-- These are the weights for the specific set of RRULEs. -->
									<key>weights</key>
									<dict>
										<!-- Half of all events will be non-recurring -->
										<key>none</key>
										<integer>50</integer>
										
										<!-- Daily and weekly are pretty common -->
										<key>daily</key>
										<integer>25</integer>
										<key>weekly</key>
										<integer>25</integer>
										
										<!-- Monthly, yearly, daily & weekly limit not so common -->
										<key>monthly</key>
										<integer>0</integer>
										<key>yearly</key>
										<integer>0</integer>
										<key>dailylimit</key>
										<integer>0</integer>
										<key>weeklylimit</key>
										<integer>0</integer>
										
										<!-- Work days pretty common -->
										<key>workdays</key>
										<integer>0</integer>
									</dict>
								</dict>
							</dict>
						</dict>
					</dict>

				</array>

				<!-- Determine the frequency at which this client configuration will 
					appear in the clients which are created by the load tester. -->
				<key>weight</key>
				<integer>1</integer>
			</dict>
		</array>
	</dict>
</plist>
